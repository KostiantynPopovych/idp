{"version":3,"sources":["pages/home/styles.module.scss","components/atoms/spinner/styles.module.scss","components/organizms/form/item/styles.module.scss","components/organizms/header/styles.module.scss","components/templates/withHeader/styles.module.scss","app/apollo/index.ts","components/molecules/itemCard/index.tsx","constants/global.ts","components/atoms/spinner/index.tsx","components/organizms/form/item/config.ts","components/organizms/form/item/index.tsx","queries/items/index.ts","hooks/useFormRef.ts","utils/transformItems.ts","utils/sanitizeObjectValues.ts","pages/home/useLogic.ts","pages/home/index.tsx","hooks/useToggle.ts","hooks/useQueryParams.ts","components/organizms/header/useLogic.ts","components/organizms/header/index.tsx","components/templates/withHeader/index.tsx","app/index.tsx","index.tsx"],"names":["module","exports","process","REACT_APP_MANAGEMENT_TOKEN","REACT_APP_BASE_URL_MANAGEMENT","restLink","RestLink","uri","headers","client","ApolloClient","link","cache","InMemoryCache","cardStyles","width","memo","name","description","imageUrl","onDeleteClick","onEditClick","style","cover","alt","src","actions","key","onClick","DeleteOutlined","EditOutlined","Meta","title","CLICK_ACTION","className","sm","Container","size","validation","required","FIELDS","label","spaceStyles","onSetRef","onSubmit","initialValues","useForm","defaultValues","handleSubmit","control","errors","handleRenderField","useCallback","Title","level","as","placeholder","Error","undefined","rules","ref","direction","map","REACT_APP_BASE_PATH","GET_ITEMS","gql","ADD_ITEM","DELETE_ITEM","UPDATE_ITEM","updateItemsList","writeQuery","query","data","items","__typename","useFormRef","useRef","handleSetRef","incoming","current","dispatchEvent","Event","cancelable","useMemo","normalizeToItem","fields","Object","entries","reduce","acc","value","normalizeFromItem","e","id","sys","version","xss","useLogic","useQuery","getItemsPending","loading","useMutation","update","deleteItem","deleteItemPending","updateItem","updateItemPending","useState","selectedItem","setSelectedItem","handleSubmitForm","normalizedData","anyInPending","handleEditItem","item","handleDeleteItem","itemId","variables","handleActionClick","accessor","handleClearSelectedItem","handleSubmitUpdate","values","set","updatedItem","sanitizeObjectValues","config","renderItem","image","price","Container_Item","destroyOnClose","visible","onOk","onCancel","useToggle","exist","setExist","handleToggle","prevState","PARAMS","useQueryParams","additionalFields","location","useLocation","search","URLSearchParams","concat","Array","isArray","el","next","get","handleToggleModal","showModal","replace","useHistory","addItem","addItemPending","queryParams","queryExist","keys","length","handleCloseModal","handleSubmitCreate","newItem","Wrap","align","span","push","children","path","exact","component","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43efeab9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"styles_Container__M7QhU\",\"Container_Item\":\"styles_Container_Item__3EGcr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"styles_Container__3YvSW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Error\":\"styles_Error__1izEu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrap\":\"styles_Wrap__3j7Cr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"styles_Container__1BcqC\"};","import { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { RestLink } from 'apollo-link-rest';\n\nconst { REACT_APP_MANAGEMENT_TOKEN, REACT_APP_BASE_URL_MANAGEMENT } = process.env;\n\nconst restLink = new RestLink({\n  uri: REACT_APP_BASE_URL_MANAGEMENT,\n  headers: {\n    'Authorization': `Bearer ${REACT_APP_MANAGEMENT_TOKEN}`,\n    'Content-Type': 'application/vnd.contentful.management.v1+json'\n  }\n});\n\nconst client = new ApolloClient({\n  link: restLink,\n  cache: new InMemoryCache()\n});\n\nexport default client;\n","import React, { memo } from 'react';\nimport { Card } from 'antd';\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons';\n\ninterface Props {\n  name: string;\n  description: string;\n  imageUrl: string;\n  price: number;\n  onEditClick: () => void;\n  onDeleteClick: () => void;\n}\n\nconst cardStyles = { width: 240 };\n\nconst ItemCard = ({ name, description, imageUrl, onDeleteClick, onEditClick }: Props) => (\n  <Card\n    style={cardStyles}\n    cover={\n      <img\n        alt={name}\n        src={imageUrl}\n      />\n    }\n    actions={[\n      <button key=\"Delete btn\" onClick={onDeleteClick}>\n        <DeleteOutlined />\n      </button>,\n      <button key=\"Edit btn\" onClick={onEditClick}>\n        <EditOutlined />\n      </button>\n    ]}\n  >\n    <Card.Meta\n      title={name}\n      description={description}\n    />\n  </Card>\n);\n\nexport default memo(ItemCard);\n","const CLICK_ACTION = {\n  EDIT: 'EDIT',\n  DELETE: 'DELETE'\n};\n\nexport { CLICK_ACTION };\n","import React, { memo } from 'react';\nimport { Spin } from 'antd';\n\nimport sm from './styles.module.scss';\n\nconst Spinner = () => (\n  <div className={sm.Container}>\n    <Spin size=\"large\" />\n  </div>\n);\n\nexport default memo(Spinner);\n","const validation = {\n  required: true\n};\n\nconst FIELDS = [\n  {\n    name: 'name',\n    label: 'Name',\n    validation\n  },\n  {\n    name: 'description',\n    label: 'Description',\n    validation\n  },\n  {\n    name: 'image',\n    label: 'Image URL',\n    validation\n  }\n];\n\nexport { FIELDS };\n","import React, {memo, useCallback} from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { Space, Input, Row, Typography } from 'antd';\n\nimport { FIELDS } from \"./config\";\nimport sm from './styles.module.scss';\n\nexport interface InitialValues {\n  name?: string;\n  description?: string;\n  image?: string;\n}\n\ninterface Props {\n  onSetRef: (ref: HTMLFormElement) => void;\n  onSubmit: (args: any) => void;\n  initialValues?: InitialValues;\n}\n\nconst spaceStyles = {\n  width: '100%'\n};\n\nconst Item = ({ onSetRef, onSubmit, initialValues }: Props) => {\n  const { handleSubmit, control, errors } = useForm({ defaultValues: initialValues });\n\n  const handleRenderField = useCallback((errors) => ({ name, label, validation }: { name: string; label: string; validation: { required: boolean } } ) => (\n    <Row key={name}>\n      <label>\n        <Typography.Title level={5}>{label}</Typography.Title>\n      </label>\n      <Controller\n        name={name}\n        as={<Input placeholder={label} className={errors[name] ? sm.Error : undefined} />}\n        control={control}\n        rules={validation}\n      />\n    </Row>\n  ), [control]);\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)} ref={onSetRef}>\n      <Space direction=\"vertical\" size=\"large\" style={spaceStyles}>\n        { FIELDS.map(handleRenderField(errors)) }\n      </Space>\n    </form>\n  );\n};\n\nexport default memo(Item);\n","import { gql, ApolloCache } from \"@apollo/client\";\n\nconst { REACT_APP_BASE_PATH } = process.env;\n\nexport interface GetItemsResponse {\n  items: {\n    items: ItemWrap[]\n  };\n  total: number;\n}\n\nconst GET_ITEMS = gql`\n  query {\n    items @rest(type: \"Items\", path: \"${REACT_APP_BASE_PATH}\") {\n      items {\n        fields {\n          name\n          description\n          image\n        }\n        sys {\n          id\n          version\n        }\n      }\n      total\n    }\n  }\n`;\n\nconst ADD_ITEM = gql`\n  mutation addItem($input: newItem!) {\n    addItem(input: $newItem)\n      @rest(type: \"Items\", path: \"${REACT_APP_BASE_PATH}\", method: \"POST\") {\n      id\n    }\n  }\n`;\n\nconst DELETE_ITEM = gql`\n  mutation deleteItem($input: itemId!) {\n    deleteItem(input: $itemId)\n      @rest(type: \"Items\", path: \"${REACT_APP_BASE_PATH}/{args.input}\", method: \"DELETE\") {\n      id\n    }\n  }\n`;\n\nconst UPDATE_ITEM = gql`\n  mutation updateItem($input: updatedItem!, $input: config!) {\n    updateItem(input: $updatedItem, config: $config)\n      @rest(type: \"Items\", path: \"${REACT_APP_BASE_PATH}/{args.config.id}\", method: \"PUT\") {\n      id\n    }\n  }\n`;\n\nconst updateItemsList = (cache: ApolloCache<unknown>) => {\n  cache.writeQuery({\n    query: GET_ITEMS,\n    data: {\n      items: {\n        __typename: 'Users'\n      }\n    }\n  })\n};\n\nexport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, UPDATE_ITEM, updateItemsList };","import { useCallback, useMemo, useRef } from \"react\";\n\nconst useFormRef = () => {\n  const ref = useRef<Nullable<HTMLFormElement>>(null);\n\n  const handleSetRef = useCallback((incoming) => {\n    ref.current = incoming;\n  }, []);\n  \n  const handleSubmit = useCallback(() => {\n    if (ref.current)\n      ref.current.dispatchEvent(new Event('submit', { cancelable: true }));\n  }, []);\n  \n  return useMemo(() => ({\n    handleSetRef,\n    handleSubmit\n  }), [handleSetRef, handleSubmit])\n};\n\nexport default useFormRef;\n","const normalizeToItem = (data: object) => ({\n  fields: {\n    ...(Object.entries(data).reduce((acc, [key, value]) => ({\n      ...acc,\n      [key]: {\n        'en-US': value\n      }\n    }), {}))\n  }\n});\n\nconst normalizeFromItem = (e: ItemWrap) =>\n  ({...Object.entries(e.fields).reduce((acc, [key, value]) =>\n      ({...acc, [key]: value && value['en-US'] }), {}), id: e.sys.id, version: e.sys.version});\n\nexport { normalizeFromItem, normalizeToItem };\n","import xss from \"xss\";\n\nexport default function (data: { [key: string ]: unknown }) {\n  return Object.entries(data).reduce((acc, [key, value]) => ({\n    ...acc,\n    [key]: xss(value as string)\n  }) , {});\n};\n","import { useCallback, useMemo, useState } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { GET_ITEMS, DELETE_ITEM, UPDATE_ITEM, GetItemsResponse, updateItemsList } from \"queries/items\";\nimport { CLICK_ACTION } from \"constants/global\";\nimport useFormRef from \"hooks/useFormRef\";\nimport { normalizeFromItem, normalizeToItem } from 'utils/transformItems';\nimport sanitizeObjectValues from \"utils/sanitizeObjectValues\";\n\nconst useLogic = () => {\n  const { data, loading: getItemsPending } = useQuery<GetItemsResponse>(GET_ITEMS);\n\n  const [deleteItem, { loading: deleteItemPending } ] = useMutation(DELETE_ITEM, { update: updateItemsList });\n\n  const [updateItem, { loading: updateItemPending, client } ] = useMutation(UPDATE_ITEM, { update: updateItemsList });\n  \n  const [selectedItem, setSelectedItem] = useState<Nullable<NormalizedItem>>(null);\n\n  const { handleSetRef, handleSubmit: handleSubmitForm } = useFormRef();\n\n  const normalizedData = data?.items.items.map(normalizeFromItem);\n\n  const anyInPending = getItemsPending || deleteItemPending || updateItemPending;\n\n  const handleEditItem = useCallback((item: NormalizedItem) => {\n    setSelectedItem(item);\n  }, []);\n\n  const handleDeleteItem = useCallback(({ id: itemId } : NormalizedItem) => {\n    deleteItem({ variables: { itemId } })\n  }, [deleteItem]);\n  \n  const handleActionClick = useCallback((accessor: string, item: NormalizedItem) => () => {\n    switch (accessor) {\n      case CLICK_ACTION.EDIT:\n        handleEditItem(item);\n        break;\n\n      case CLICK_ACTION.DELETE:\n        handleDeleteItem(item);\n        break;\n    }\n  }, [handleDeleteItem, handleEditItem]);\n\n  const handleClearSelectedItem = useCallback(() => {\n    setSelectedItem(null);\n  }, []);\n\n  const handleSubmitUpdate = useCallback((values) => {\n    const { id, version } = selectedItem as NormalizedItem;\n    // @ts-ignore\n    client.link.headers.set('X-Contentful-Version', version);\n    updateItem({ variables: { updatedItem: normalizeToItem(sanitizeObjectValues(values)), config: { id, version } } });\n    handleClearSelectedItem();\n  }, [selectedItem, client, updateItem, handleClearSelectedItem]);\n\n  return useMemo(() => ({\n    handleActionClick,\n    anyInPending,\n    items: normalizedData,\n    selectedItem,\n    handleSetRef,\n    handleSubmitForm,\n    handleClearSelectedItem,\n    handleSubmitUpdate\n  }),[handleActionClick, anyInPending, normalizedData, selectedItem, handleSetRef, handleSubmitForm, handleClearSelectedItem, handleSubmitUpdate])\n};\n\nexport default useLogic;\n","import React, { memo, useCallback } from 'react';\nimport ItemCard from \"components/molecules/itemCard\";\nimport { CLICK_ACTION } from \"constants/global\";\nimport Spinner from \"components/atoms/spinner\";\nimport { Modal } from 'antd';\nimport ItemForm, { InitialValues } from 'components/organizms/form/item';\n\nimport sm from './styles.module.scss';\nimport useLogic from \"./useLogic\";\n\nconst Home = () => {\n  const {\n    items,\n    handleActionClick,\n    anyInPending,\n    selectedItem,\n    handleSetRef,\n    handleSubmitForm,\n    handleClearSelectedItem,\n    handleSubmitUpdate\n  } = useLogic();\n\n  const renderItem = useCallback((item) => {\n    const { id, description, name, image, price } = item;\n\n    return <div key={id} className={sm.Container_Item}>\n        <ItemCard\n          onDeleteClick={handleActionClick(CLICK_ACTION.DELETE, item)}\n          onEditClick={handleActionClick(CLICK_ACTION.EDIT, item)}\n          description={description}\n          name={name}\n          imageUrl={image}\n          price={price}\n        />\n      </div>\n  }, [handleActionClick]);\n\n  return <div className={sm.Container}>\n    <Modal\n      title=\"Update item\"\n      destroyOnClose\n      visible={!!selectedItem}\n      onOk={handleSubmitForm}\n      onCancel={handleClearSelectedItem}\n    >\n      <ItemForm initialValues={selectedItem as InitialValues} onSubmit={handleSubmitUpdate} onSetRef={handleSetRef} />\n    </Modal>\n    {anyInPending && <Spinner />}\n    {items?.map(renderItem)}\n  </div>\n};\n\nexport default memo(Home);\n","import {useCallback, useMemo, useState} from \"react\";\n\nconst useToggle = () => {\n  const [exist, setExist] = useState(false);\n  \n  const handleToggle = useCallback(() => {\n    setExist(prevState => !prevState);\n  }, []);\n  \n  return useMemo(() => ({\n    exist,\n    handleToggle\n  }), [exist, handleToggle]);\n};\n\nexport default useToggle;\n","import { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport xss from 'xss';\n\ninterface QueryParams {\n  name?: string;\n  description?: string;\n  image?: string;\n}\n\nconst PARAMS = ['name', 'description', 'image'];\n\nconst useQueryParams = (additionalFields: string | string[] = ''): QueryParams => {\n  // region *******************************DATA*********************************\n  const location = useLocation();\n  // endregion\n\n  return useMemo(() => {\n    const search = new URLSearchParams(location.search);\n    return PARAMS.concat(\n      Array.isArray(additionalFields) ? additionalFields : [additionalFields]\n    ).reduce(\n      (el: Partial<QueryParams>, next: string) => ({\n        ...el,\n        ...(search.get(next) && { [next]: xss(search.get(next) as string) })\n      }),\n      {}\n    );\n  }, [additionalFields, location.search]);\n};\n\nexport default useQueryParams;\n","import useToggle from \"hooks/useToggle\";\nimport { useCallback, useMemo } from \"react\";\nimport useFormRef from \"hooks/useFormRef\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_ITEM, updateItemsList } from \"queries/items\";\nimport { normalizeToItem } from 'utils/transformItems';\nimport useQueryParams from \"hooks/useQueryParams\";\nimport { useHistory } from 'react-router-dom';\nimport sanitizeObjectValues from \"utils/sanitizeObjectValues\";\n\nconst useLogic = () => {\n  const { handleToggle: handleToggleModal, exist: showModal } = useToggle();\n  \n  const { replace } = useHistory();\n  \n  const { handleSetRef, handleSubmit: handleSubmitForm } = useFormRef();\n\n  const [addItem, { loading: addItemPending, client }] = useMutation(ADD_ITEM, { update: updateItemsList });\n\n  const queryParams = useQueryParams();\n  \n  const queryExist = useMemo(() => !!Object.keys(queryParams).length, [queryParams]);\n  \n  const handleCloseModal = useCallback(() => {\n    if (queryExist) {\n      replace('/home');\n    } else {\n      handleToggleModal();\n    }\n  }, [handleToggleModal, queryExist, replace]);\n  \n  const handleSubmitCreate = useCallback(data => {\n    // @ts-ignore\n    client.link.headers.set('X-Contentful-Content-Type', 'image');\n    addItem({ variables: { newItem: normalizeToItem(sanitizeObjectValues(data)) } });\n    handleCloseModal();\n  }, [addItem, client, handleCloseModal]);\n  \n  return useMemo(() => ({\n    addItemPending,\n    handleToggleModal,\n    showModal,\n    handleCloseModal,\n    handleSubmitCreate,\n    handleSubmitForm,\n    handleSetRef,\n    queryExist,\n    queryParams\n  }), [addItemPending, handleToggleModal, showModal, handleCloseModal, handleSubmitCreate, handleSubmitForm, handleSetRef, queryExist, queryParams])\n};\n\nexport default useLogic;\n","import React, { memo } from 'react';\nimport { Typography, Row, Col, Button, Modal } from 'antd';\nimport ItemForm from \"components/organizms/form/item\";\nimport Spinner from \"components/atoms/spinner\";\n\nimport useLogic from \"./useLogic\";\nimport sm from './styles.module.scss';\n\nconst Header = () => {\n  const {\n    showModal,\n    handleToggleModal,\n    handleSubmitCreate,\n    handleSubmitForm,\n    handleSetRef,\n    addItemPending,\n    queryParams,\n    queryExist,\n    handleCloseModal\n  } = useLogic();\n\n  return (\n    <>\n      {addItemPending && <Spinner />}\n      <Modal\n        destroyOnClose\n        title=\"Add item\"\n        visible={showModal || queryExist}\n        onOk={handleSubmitForm}\n        onCancel={handleCloseModal}\n      >\n        <ItemForm initialValues={queryParams} onSubmit={handleSubmitCreate} onSetRef={handleSetRef} />\n      </Modal>\n      <div className={sm.Wrap}>\n        <Row align=\"middle\">\n          <Col span={2} push={4}>\n            <Typography.Title level={3}>IDP</Typography.Title>\n          </Col>\n          <Col span={2} push={16}>\n           <Button onClick={handleToggleModal}>Add item</Button>\n          </Col>\n        </Row>\n      </div>\n    </>\n  )\n};\n\nexport default memo(Header);\n","import Header from \"components/organizms/header\";\nimport React, { memo, PropsWithChildren } from 'react';\n\nimport sm from './styles.module.scss';\n\nconst WithHeader = ({ children } :PropsWithChildren<{}>) => (\n  <div className={sm.Container}>\n    <Header/>\n    { children }\n  </div>\n);\n\nexport default memo(WithHeader);\n","import React, { memo } from 'react';\nimport { ApolloProvider } from '@apollo/client';\nimport client from './apollo';\nimport HomePage from 'pages/home';\nimport WithHeader from \"components/templates/withHeader\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <Router>\n      <Switch>\n        <Route path=\"/home\" exact component={() => <WithHeader><HomePage /></WithHeader>} />\n        <Redirect to=\"/home\" />\n      </Switch>\n    </Router>\n  </ApolloProvider>\n);\n\nexport default memo(App);\n","import './index.scss';\nimport 'antd/dist/antd.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}